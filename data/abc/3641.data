environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\kangwen\\AppData\\Roaming', 'CCHZPATH': 'C:\\Users\\kangwen\\CTEX\\CTeX\\cct\\fonts', 'CCPKPATH': 'C:\\Users\\kangwen\\CTEX\\CTeX\\fonts\\pk\\modeless\\cct\\dpi$d', 'CLASSPATH': ' .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; ', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'DESKTOP-DQ389TQ', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\kangwen', 'JAVA_HOME': 'C:\\Program Files\\Java\\jdk1.8.0_191', 'LOCALAPPDATA': 'C:\\Users\\kangwen\\AppData\\Local', 'LOGONSERVER': '\\\\DESKTOP-DQ389TQ', 'MSMPI_BENCHMARKS': 'C:\\Program Files\\Microsoft MPI\\Benchmarks\\', 'MSMPI_BIN': 'C:\\Program Files\\Microsoft MPI\\Bin\\', 'MSMPI_INC': 'C:\\Program Files (x86)\\Microsoft SDKs\\MPI\\Include\\', 'MSMPI_LIB32': 'C:\\Program Files (x86)\\Microsoft SDKs\\MPI\\Lib\\x86\\', 'MSMPI_LIB64': 'C:\\Program Files (x86)\\Microsoft SDKs\\MPI\\Lib\\x64\\', 'NUMBER_OF_PROCESSORS': '4', 'ONEDRIVE': 'C:\\Users\\kangwen\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'C:\\Program Files\\Microsoft MPI\\Bin\\;C:\\Program Files\\VanDyke Software\\Clients\\;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Skype\\Phone\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Users\\kangwen\\CTEX\\UserData\\miktex\\bin;C:\\Users\\kangwen\\CTEX\\MiKTeX\\miktex\\bin;C:\\Users\\kangwen\\CTEX\\CTeX\\ctex\\bin;C:\\Users\\kangwen\\CTEX\\CTeX\\cct\\bin;C:\\Users\\kangwen\\CTEX\\CTeX\\ty\\bin;C:\\Users\\kangwen\\CTEX\\Ghostscript\\gs9.05\\bin;C:\\Users\\kangwen\\CTEX\\GSview\\gsview;C:\\Users\\kangwen\\CTEX\\WinEdt;C:\\Users\\kangwen\\AppData\\Local\\Programs\\Python\\Python37\\Scripts\\;C:\\Users\\kangwen\\AppData\\Local\\Programs\\Python\\Python37\\;C:\\Users\\kangwen\\AppData\\Local\\Microsoft\\WindowsApps;C:\\texlive\\2018\\bin\\win32;;C:\\Program Files\\JetBrains\\PyCharm 2019.1.2\\bin;', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 142 Stepping 9, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '8e09', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PROMPT': '$P$G', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'PYCHARM': 'C:\\Program Files\\JetBrains\\PyCharm 2019.1.2\\bin;', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\WINDOWS', 'TEMP': 'C:\\Users\\kangwen\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\kangwen\\AppData\\Local\\Temp', 'USERDOMAIN': 'DESKTOP-DQ389TQ', 'USERDOMAIN_ROAMINGPROFILE': 'DESKTOP-DQ389TQ', 'USERNAME': 'ypli', 'USERPROFILE': 'C:\\Users\\kangwen', 'VS140COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\', 'WINDIR': 'C:\\WINDOWS'})